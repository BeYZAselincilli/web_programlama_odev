// <auto-generated />
using System;
using Hastane_Randevu.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hastane_Randevu.Migrations
{
    [DbContext(typeof(HastaneContext))]
    partial class HastaneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hastane_Randevu.Models.CalismaTakvimi", b =>
                {
                    b.Property<int>("CalismaTakvimiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalismaTakvimiID"), 1L, 1);

                    b.Property<TimeSpan>("BaslangicSaati")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("BitisSaati")
                        .HasColumnType("time");

                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<int>("DoktorID1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("CalismaTakvimiID");

                    b.HasIndex("DoktorID");

                    b.HasIndex("DoktorID1");

                    b.ToTable("CalismaTakvimi");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Doktor", b =>
                {
                    b.Property<int>("DoktorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoktorID"), 1L, 1);

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UzmanlikAlaniID")
                        .HasColumnType("int");

                    b.Property<int>("UzmanlikAlaniID1")
                        .HasColumnType("int");

                    b.HasKey("DoktorID");

                    b.HasIndex("UzmanlikAlaniID");

                    b.HasIndex("UzmanlikAlaniID1");

                    b.ToTable("Doktorlar");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Kullanici", b =>
                {
                    b.Property<int>("KullaniciID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KullaniciID"), 1L, 1);

                    b.Property<string>("Eposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KullaniciID");

                    b.ToTable("Kullanicilar");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Poliklinik", b =>
                {
                    b.Property<int>("PoliklinikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoliklinikID"), 1L, 1);

                    b.Property<string>("Konum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliklinikAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PoliklinikID");

                    b.ToTable("Poliklinikler");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Randevu", b =>
                {
                    b.Property<int>("RandevuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RandevuID"), 1L, 1);

                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<int>("DoktorID1")
                        .HasColumnType("int");

                    b.Property<int>("KullaniciID")
                        .HasColumnType("int");

                    b.Property<int>("KullaniciID1")
                        .HasColumnType("int");

                    b.Property<int>("PoliklinikID")
                        .HasColumnType("int");

                    b.Property<int>("PoliklinikID1")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("RandevuSaati")
                        .HasColumnType("time");

                    b.Property<DateTime>("RandevuTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("RandevuID");

                    b.HasIndex("DoktorID");

                    b.HasIndex("DoktorID1");

                    b.HasIndex("KullaniciID");

                    b.HasIndex("KullaniciID1");

                    b.HasIndex("PoliklinikID");

                    b.HasIndex("PoliklinikID1");

                    b.ToTable("Randevular");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.UzmanlikAlani", b =>
                {
                    b.Property<int>("UzmanlikAlaniID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UzmanlikAlaniID"), 1L, 1);

                    b.Property<string>("UzmanlikAlaniAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UzmanlikAlaniID");

                    b.ToTable("UzmanlikAlanlari");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.CalismaTakvimi", b =>
                {
                    b.HasOne("Hastane_Randevu.Models.Doktor", null)
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.Doktor", "Doktor")
                        .WithMany("CalismaTakvimi")
                        .HasForeignKey("DoktorID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Doktor", b =>
                {
                    b.HasOne("Hastane_Randevu.Models.UzmanlikAlani", null)
                        .WithMany()
                        .HasForeignKey("UzmanlikAlaniID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.UzmanlikAlani", "UzmanlikAlani")
                        .WithMany("Doktorlar")
                        .HasForeignKey("UzmanlikAlaniID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UzmanlikAlani");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Randevu", b =>
                {
                    b.HasOne("Hastane_Randevu.Models.Doktor", null)
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.Doktor", "Doktor")
                        .WithMany("Randevular")
                        .HasForeignKey("DoktorID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("KullaniciID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.Kullanici", "Kullanici")
                        .WithMany("Randevular")
                        .HasForeignKey("KullaniciID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.Poliklinik", null)
                        .WithMany()
                        .HasForeignKey("PoliklinikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hastane_Randevu.Models.Poliklinik", "Poliklinik")
                        .WithMany("Randevular")
                        .HasForeignKey("PoliklinikID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Kullanici");

                    b.Navigation("Poliklinik");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Doktor", b =>
                {
                    b.Navigation("CalismaTakvimi");

                    b.Navigation("Randevular");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Kullanici", b =>
                {
                    b.Navigation("Randevular");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.Poliklinik", b =>
                {
                    b.Navigation("Randevular");
                });

            modelBuilder.Entity("Hastane_Randevu.Models.UzmanlikAlani", b =>
                {
                    b.Navigation("Doktorlar");
                });
#pragma warning restore 612, 618
        }
    }
}
